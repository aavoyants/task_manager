require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ProjectsController do
  let!(:user){ FactoryGirl.create(:user) }
  let!(:project){ FactoryGirl.create(:project, user: user, name: 'project 1') }
  before(:each) do
    sign_in :user, user
  end

  # This should return the minimal set of attributes required to create a valid
  # Project. As you add validations to Project, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    { "name" => "my project" }
  end

  describe "GET index" do
    it "assigns all projects as @projects" do
      get :index
      assigns(:projects).should eq([project])
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Project" do
        expect {
          post :create, project: valid_attributes, format: :js
        }.to change(Project, :count).by(1)
      end

      it "assigns a newly created project as @project" do
        post :create, project: valid_attributes, format: :js
        assigns(:project).should be_a(Project)
        assigns(:project).should be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project.any_instance.stub(:save).and_return(false)
        post :create, project: { "name" => "invalid value" }, format: :js
        assigns(:project).should be_a_new(Project)
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested project" do
        # Assuming there are no other projects in the database, this
        # specifies that the Project created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Project.any_instance.should_receive(:update_attributes).with({ "name" => "do laundry" })
        put :update, id: project.to_param, project: { "name" => "do laundry" }, format: :js
      end

      it "assigns the requested project as @project" do
        put :update, id: project.to_param, project: valid_attributes, format: :js
        assigns(:project).should eq(project)
      end
    end

    describe "with invalid params" do
      it "assigns the project as @project" do
        # Trigger the behavior that occurs when invalid params are submitted
        Project.any_instance.stub(:save).and_return(false)
        put :update, id: project.to_param, project: { "name" => "invalid value" }, format: :js
        assigns(:project).should eq(project)
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested project" do
      expect {
        delete :destroy, id: project.to_param, format: :js
      }.to change(Project, :count).by(-1)
    end
  end
end
